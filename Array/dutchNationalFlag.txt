// Sort an Array of 0's,1's and 2's
// ALGORITHM

/* Lo := 1; Mid := 1; Hi := N;
while Mid <= Hi do
Invariant: a[1..Lo-1]=0 and a[Lo..Mid-1]=1 and a[Hi+1..N]=2; a[Mid..Hi] are unknown.
case a[Mid] in
0: swap a[Lo] and a[Mid]; Lo++; Mid++
1: Mid++
2: swap a[Mid] and a[Hi]; Hi
*/

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG
{
    public static void sortDutch(int arr[],int n)
    {
        int lo=0,high=n-1,mid=0,temp=0;
        while(mid<=high)
        {
            switch(arr[mid])
            {
                case 0: temp=arr[lo];
                        arr[lo]=arr[mid];
                        arr[mid]=temp;
                        lo++;
                        mid++;
                        break;
                
                case 1:mid++;
                       break;
                       
                case 2:temp=arr[mid];
                       arr[mid]=arr[high];
                       arr[high]=temp;
                       high--;
                       break;
            }
        }
    }
	public static void main (String[] args)throws Exception 
	{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int t=Integer.parseInt(br.readLine());
		while(t-->0)
		{
		    int n=Integer.parseInt(br.readLine());
		    int arr[]=new int[n];
		    String s[]=br.readLine().split(" ");
		    for(int i=0;i<n;i++)
		        arr[i]=Integer.parseInt(s[i]);
		        
		    sortDutch(arr,arr.length);
		    for(int i=0;i<n;i++)
		        System.out.print(arr[i]+" ");
		    System.out.println();
		}
	}
}